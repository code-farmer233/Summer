问题描述
随着新学期的到来，伊格纳修斯火车站如今非常繁忙。许多学生想乘火车回到学校（因为伊格纳修斯火车站的火车是世界上最快的火车）。但是，这里出现了一个问题，只有一条铁路使所有火车停下来。因此，所有火车都从一侧进来，从另一侧出来。对于此问题，如果火车A先进入铁路，然后火车B在火车A离开之前就进入铁路，那么火车A直到火车B离开后才能离开。下图说明了问题所在。现在的问题是，车站中最多有9列火车，所有火车都有一个ID（从1到n编号），火车以O1的顺序进入铁路，您的任务是确定火车是否可以按订单O2下车
输入项
输入包含几个测试用例。每个测试用例均由整数，列车数量和两个字符串组成，列车的顺序为：O1，列车的顺序为：O2。输入在文件末尾终止。样本输入中有更多详细信息。
输出量
输出包含字符串“ No”。如果您无法将O2交换为O1，或者您应该输出一条包含“是”的行，然后输出交换订单的方式（您应该输入“输入”以表示进入铁路的火车，然后“输出”一列火车驶出铁路）。在每个测试用例之后打印包含“完成”的行。示例输出中有更多详细信息。
样本输入
3 123 321
3 123 312
样本输出
Yes.
in
in
in
out
out
out
FINISH
No.
FINISH
AC代码：
#include<stdio.h>
#include<string.h>
#include<stack>
using namespace std;
int main()
{
    int n, i, j, k, flag[50];
    char s1[15], s2[15];
    stack <char> s;
    while(~scanf("%d %s%s",&n,s1,s2))
    {
        while(!s.empty())  
        s.pop();     
        memset(flag,-1,sizeof(flag));
        j = k = 0;
        for(i = 0; i < n; i++)
        {
            s.push(s1[i]);
            flag[k++] = 1;
            while(!s.empty() && s.top() == s2[j])
            {
                flag[k++] = 0;
                s.pop();
                j++;
            }
        }
        if(j == n)   
        {      
            printf("Yes.\n");
            for(i = 0; i < k; i++)
            {
                if(flag[i])
                    printf("in\n");
                else
                    printf("out\n");
            }
        }
        else
            printf("No.\n");
        printf("FINISH\n");
    }
    return 0;
}


一个奇怪的电梯
问题描述
有一个奇怪的升降机，升降机可以根据需要停在每个楼层，每个楼层上都有一个数字Ki（0 <= Ki <= N），该升降机只有两个按钮：向上和向下。在第i楼，如果您按“ UP”按钮，您将在Ki楼上，即，您将进入第i + Ki楼，同样，如果您在“ i”楼层按“ DOWN”，则将下楼Ki楼层，即您将进入i-Ki楼层。当然，电梯不能高于N，不能低于1。例如，有一个5层楼的建筑物，k1 = 3，k2 = 3，k3 = 1，k4 = 2，k5 =5。从一楼开始，您可以按“ UP”按钮，然后您将上升到四楼，如果您按“ DOWN”按钮，电梯将无法因为它不能下降到-2楼，如您所知，
问题来了：当您在A楼上并且想去B楼时，他至少必须按几次“ UP”或“ DOWN”按钮？
输入项
输入包含几个测试用例。每个测试用例包含两行。
第一行包含上述三个整数N，A，B（1 <= N，A，B <= 200），第二行包含N个整数k1，k2，.... kn。
单个0表示输入的结尾。
输出量
对于每种输入输出情况，每当输入整数时，在A楼时必须按下按钮的次数最少，而您要转到B楼。如果无法到达B楼，则打印“ -1”。
样本输入
5 1 5
3 3 1 2 5
0
样本输出
3
AC代码:
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
int T,N,A,B;
int mp[220],f[220];
void BFS_Find(){
    queue<int>q;
    q.push(A);
    f[A]=1;
    int t;
    while(!q.empty()){
        t=q.front();
        q.pop();
        if(t==B)break;    
        int next=t+mp[t];
        if(next>=1&&next<=B&&f[next]==0){
            q.push(next);
            f[next]=f[t]+1;
        }
        next=t-mp[t];
        if(next>=0&&next<=B&&f[next]==0){
            q.push(next);
            f[next]=f[t]+1;
        }
    }
    if(t!=B)
        f[B]=0;
}
int main()
{
    int i,j;
    while(scanf("%d",&N)&&N){
        if(N==0)break;
        scanf("%d%d",&A,&B);
        for(i=1;i<=N;i++)
        scanf("%d",&mp[i]);
        memset(f,0,sizeof(f));
        BFS_Find();
        printf("%d\n",f[B]-1);
    }
    return 0;
}

题意：现有N个大理石，每个大理石上写了一个非负整数，首先把各数从小到大排序，然后回答Q个查询问题，查询整数x是否存在，若存在给出位置。排序后的大理石从左到右编号为1-N
AC代码：
#include <iostream>
#include <algorithm>
using namespace std;
const int MAXN = 10000;
int main()
{
    int N, Q, a[MAXN], x;
    int kase = 0;
    while (cin >> N >> Q && N)
    {
        cout << "CASE# " << ++kase << ":\n";
        for (int i = 0; i<N; ++i)
            cin >> a[i];
        sort(a, a+N); //升序
        while (Q--)
        {
            cin >> x；
            int p = lower_bound(a, a+N, x) - a；
            if (a[p] == x) printf("%d found at %d\n", x, p+1); 
            else printf("%d not found\n", x);
        }
    }
    return 0;
}
解题思路：先排序，再查找即可。查找可以直接遍历，或者二分查找，在这里采用的是STL中的sort函数和针对有序序列的lower_bound函数。
