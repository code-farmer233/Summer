康托展开是一个全排列到一个自然数的双射，常用于构建hash表时的空间压缩。设有n个数（1，2，3，4,…,n），可以有组成不同(n!种)的排列组合，康托展开表示的就是是当前排列组合在n个不同元素的全排列中的名次。
康托展开的公式：
X=a[n]*(n-1)!+a[n-1]*(n-2)!+...+a[i]*(i-1)!+...+a[1]*0! 
康托展开代码：（假设排列数不超过20个）
#include <bits/stdc++.h>
using namespace std;

int f[20];
void jie_cheng(int n)
{
    f[0] = f[1] = 1; // 0的阶乘为1
    for(int i = 2; i <= n; i++) f[i] = f[i - 1] * i;
}
 
string str;
int kangtuo()
{
    int ans = 1;  
    int len = str.length();
    for(int i = 0; i < len; i++)
    {
        int tmp = 0;
        for(int j = i + 1; j < len; j++)
        {
            if(str[i] > str[j]) 
            tmp++；
        }
        ans += tmp * f[len - i - 1];
    }
    return ans;
}
 
int main()
{
    int n;
	cin>>n;
    jie_cheng(n);
	cin>>str; 
    cout<<kangtuo()<<endl;
}


逆康托展开
听名字就知道，就是倒过来，用编号还原排列
举个例子，
5324153241是55的全排列中编号为111111的数
用111111得到5324153241的过程如下：
用 111/4!=4111/4!=4余1515，说明比首位小的数有44个，所以首位为55，余数继续辗转。

用15/3!=215/3!=2余33，说明在第二位之后小于第二位的数有22个，所以第二位为33，余数继续辗转。

用 3/2!=13/2!=1余11，说明在第三位之后小于第三位的数有11个，所以第三位为22，余数继续辗转。

用1/1!=11/1!=1余00，说明在第四位之后小于第四位的数有11个，所以第四位为44（2,3,5都取过了），余数继续辗转。
康托逆展开代码：（假设排列数不超过20个） 
#include <bits/stdc++.h>
using namespace std;
 
int f[20];
int x, num;
 
void jie_cheng(int n)
{
    f[0] = f[1] = 1;
    for(int i = 2; i <= n; i++) f[i] = f[i - 1] * i;
}
 
vector<char> vec; //存需要排列的字符
void rev_kangtuo(int k) //输出序号为 k 的字符序列
{
    int n = vec.size(), len = 0;
    string ans = "";
    k--; // 算的时候是按 12345 是第0位
    for(int i = 1; i <= n; i++){
        int t = k / f[n - i]; // 第 i 位需要 第 t + 1 大的数
        k %= f[n - i];        //剩下的几位需要提供的排列数
        ans += vec[t] ; //  vec[t] 就是第 t + 1 大的数
        vec.erase(vec.begin() + t); 
    }
    cout << ans << '\n';
}
 
// 假设展开后不超过10位
int main()
{
    jie_cheng(10); // 预处里好阶乘
    scanf("%d", &x); // 输入需要逆展开的数字
    /************康托逆展开***********/
    for(int i = 1; i <= 10; i++)
    {
    	if(x / f[i] == 0) // 求出 x 逆展开所需的最小的位数，方便下面的初始化
    	{
    		num = i;
    		break;
    	}
    }
    for(int i = 1; i <= num; i++) vec.push_back(i + '0'); //输入的位数只要不小于num就可以
    rev_kangtuo(x);
}
